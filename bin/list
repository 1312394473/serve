#!/usr/bin/env node

import { default as micro, send } from 'micro'
import { red, green } from 'chalk'
import fs from 'fs'
import bin from 'commander'
import pkg from '../../package.json'
import path from 'path'
import { compile } from 'handlebars'

bin
  .version(pkg.version)
  .option('-p, --port [int]', 'The port on which micro will be running')
  .parse(process.argv)

process.env.ASSET_DIR = '/' + Math.random().toString(36).substr(2, 10)

const directory = bin.args[bin.args.length - 1]
let current = process.cwd()

if (directory) {
  current = path.resolve(process.cwd(), directory)
}

const isDir = dir => {
  try {
    fs.statSync(dir)
  } catch (err) {
    return false
  }

  if (fs.statSync(dir).isDirectory()) {
    return true
  }

  return false
}

if (!isDir(current)) {
  console.error(red('Specified directory doesn\'t exist!'))
  process.exit(1)
}

const prepareView = () => {
  let viewContent = false
  const viewPath = path.normalize(__dirname + '/../../views/index.hbs')

  try {
    viewContent = fs.readFileSync(viewPath, 'utf8')
  } catch (err) {
    throw err
  }

  return compile(viewContent)
}

const server = micro(async (req, res) => {
  const parsed = path.parse(req.url)

  if (req.url.indexOf(process.env.ASSET_DIR) > -1) {
    let body = 'Not able to load asset!'

    const relative = path.relative(process.env.ASSET_DIR, req.url),
          target = path.join(__dirname, '/../assets', relative)

    try {
      body = fs.readFileSync(target, 'utf8')
    } catch (err) {
      throw err
    }

    return send(res, 200, body)
  }

  let files = []

  try {
    files = fs.readdirSync(current)
  } catch (err) {
    throw err
  }

  for (let file of files) {
    const filePath = path.resolve(current, file)
    files[files.indexOf(file)] = path.parse(filePath)
  }

  const render = prepareView()

  const details = {
    files,
    assetDir: process.env.ASSET_DIR
  }

  send(res, 200, render(details))
})

server.listen(3000, () => {
  const details = server.address()
  console.log(green(`Running on http://localhost:${details.port}`))
})
